generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  providers       Provider[] @relation("StoreToProvider")
  banners         Banner[] @relation("StoreToBanner")
  billboards      Billboard[] @relation("StoreToBillboard")
  brands          Brand[] @relation("StoreToBrand")
  categories      Category[] @relation("StoreToCategory")
  subCategories   SubCategory[] @relation("StoreToSubCategory")
  attributes      Attribute[] @relation("StoreToAttribute")
  products        Product[]  @relation("StoreToProduct")
  productsVariant ProductVariant[] @relation("StoreToProductVariant")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Provider {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToProvider", fields: [storeId], references: [id])
  name        String
  contactName String?
  email       String?   @unique
  phone       String?
  address     String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storeId])
}
model Banner {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBanner", fields: [storeId], references: [id])
  heading     String
  subHeading  String?
  imageUrl    String
  btnText     String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  colorId     String?    // Foreign Key to Color
  color       Color?  @relation(fields: [colorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([colorId]) // Índice en el campo colorId
  @@index([categoryId])
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  banners     Banner[]
  subcategories SubCategory[]
  name        String
  imageUrl    String
  colorId     String?    // Foreign Key to Color
  color       Color?  @relation(fields: [colorId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([colorId]) // Índice en el campo colorId
  
  @@index([billboardId])
}

model SubCategory {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToSubCategory", fields: [storeId], references: [id])
  categoryId  String   // Foreign Key to Category
  category    Category @relation(fields: [categoryId], references: [id])
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  banners     Banner[]
  categories  Category[]
  productVariants ProductVariant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Brand {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToBrand", fields: [storeId], references: [id])
  name        String
  imageUrl    String
  product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([storeId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal   
  stock       Decimal?
  images      Image[]   // Relation to Image model
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  variants    ProductVariant[]
  brandId     String
  brand       Brand  @relation(fields: [brandId], references: [id])
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id])
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
  @@index([providerId])
}

model Attribute {
  id        String   @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToAttribute", fields: [storeId], references: [id])
  productVariantId String? // Foreign Key to Product Variant
  productVariant     ProductVariant?  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  name      String   // Ej: "Color", "Tamaño", "Capacidad"
  values    String[] // Ej: ["Rojo", "Azul"], ["Pequeño", "Mediano"], ["64GB", "128GB"]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([productVariantId])
}

model ProductVariant {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProductVariant", fields: [storeId], references: [id])
  productId    String    // Foreign key to Product
  product      Product   @relation(fields: [productId], references: [id])
  sku          String    // Código único de la variante (opcional)
  price        Decimal?
  stock        Decimal?
  colorId      String?    // Foreign Key to Color
  color        Color?  @relation(fields: [colorId], references: [id])
  attributes   Attribute[]
  images       Image[] 

  @@index([productId])
  @@index([storeId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(uuid())
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?   // Foreign Key to Product
  productVariantId String? // Foreign Key to Product Variant
  productVariant     ProductVariant?  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([productVariantId])
}

model Order {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
